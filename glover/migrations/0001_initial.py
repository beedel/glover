# Generated by Django 2.2.4 on 2020-03-03 22:01

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('course', models.CharField(choices=[('Accounting', 'Accounting'), ('Anatomy', 'Anatomy'), ('Archaeology', 'Archaeology'), ('Astronomy', 'Astronomy'), ('Biochemistry', 'Biochemistry'), ('Business', 'Business'), ('Celtic Studies', 'Celtic Studies'), ('Chemistry', 'Chemistry'), ('Civil Engineering', 'Civil Engineering'), ('Computing Science', 'Computing Science'), ('Dentistry', 'Dentistry'), ('Earth Science', 'Earth Science'), ('Economics', 'Economics'), ('Engineering', 'Engineering'), ('English Literature', 'English Literature'), ('Film and Television Studies', 'Film and Television Studies'), ('Finance', 'Finance'), ('French', 'French'), ('Gaelic', 'Gaelic'), ('Genetics', 'Genetics'), ('Geography', 'Geography'), ('Geology', 'Geology'), ('German', 'German'), ('Greek', 'Greek'), ('History', 'History'), ('History of Art', 'History of Art'), ('Human Biology', 'Human Biology'), ('Immunology', 'Immunology'), ('Italian', 'Italian'), ('Latin', 'Latin'), ('Marine Biology', 'Marine Biology'), ('Mathematics', 'Mathematics'), ('Medicine', 'Medicine'), ('Microbiology', 'Microbiology'), ('Music', 'Music'), ('Neuroscience', 'Neuroscience'), ('Nursing', 'Nursing'), ('Pharmacology', 'Pharmacology'), ('Philosophy', 'Philosophy'), ('Physics', 'Physics'), ('Physiology', 'Physiology'), ('Politics', 'Politics'), ('Portuguese', 'Portuguese'), ('Psychology', 'Psychology'), ('Russian', 'Russian'), ('Sociology', 'Sociology'), ('Software Engineering', 'Software Engineering'), ('Spanish', 'Spanish'), ('Statistics', 'Statistics'), ('Theology', 'Theology'), ('Veterinary Medicine', 'Veterinary Medicine'), ('Zoology', 'Zoology')], max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Interest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('interest', models.CharField(choices=[('Yoga', 'Yoga'), ('Football', 'Football'), ('Tennis', 'Tennis'), ('Art', 'Art'), ('Photography', 'Photography'), ('Swimming', 'Swimming')], max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='Society',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('society', models.CharField(choices=[('Acapella', 'Acapella'), ('Art and Life Drawing', 'Art and Life Drawing'), ('Art Appreciation', 'Art Appreciation'), ('Astrology', 'Astrology'), ('Astronomy', 'Astronomy'), ('Bad Movie', 'Bad Movie'), ('Baking', 'Baking'), ('Ballroom and Latin Dancing', 'Ballroom and Latin Dancing'), ('Beekeeping', 'Beekeeping'), ('Bhakti Yoga', 'Bhakti Yoga'), ('Big Band', 'Big Band'), ('Bridging Education', 'Bridging Education'), ('Buddhist', 'Buddhist'), ('Business Club', 'Business Club'), ('Food and Body Positivity', 'Food and Body Positivity'), ('Friends of BHF', 'Friends of BHF'), ('Cardiovascular', 'Cardiovascular'), ('Catholic Association', 'Catholic Association'), ('Cecilian', 'Cecilian'), ('Chicken Wing', 'Chicken Wing'), ('Chinese Students Community', 'Chinese Students Community'), ('Chocolate', 'Chocolate'), ('Christian Union', 'Christian Union'), ('Comic Creators Club', 'Comic Creators Club'), ('Communist', 'Communist'), ('Competitive Programming', 'Competitive Programming'), ('Crafts', 'Crafts'), ('Glagow Students for Choice', 'Glagow Students for Choice'), ('Open Cages', 'Open Cages'), ('Scottish Country Dance Club', 'Scottish Country Dance Club'), ('Students Against Climate Change', 'Students Against Climate Change'), ('Dance4Water Glasgow', 'Dance4Water Glasgow'), ('Dancemania', 'Dancemania'), ('Disney', 'Disney'), ('Doctor Who', 'Doctor Who'), ('Documentary', 'Documentary'), ('Drag', 'Drag'), ('Pole Dancing Club', 'Pole Dancing Club'), ('Student Dance Company', 'Student Dance Company'), ('Self Defence', 'Self Defence'), ('European', 'European'), ('Eurovision', 'Eurovision'), ('Exploration', 'Exploration'), ('Extinction Rebellion', 'Extinction Rebellion'), ('Film', 'Film'), ('War Film', 'War Film'), ('Gaming', 'Gaming'), ('Gin', 'Gin'), ('Glasgow Insight into Science and Technology', 'Glasgow Insight into Science and Technology'), ('Game Design and Development', 'Game Design and Development'), ('Scottish Greens', 'Scottish Greens'), ('Glasgow Insight into Science and Technology', 'Glasgow Insight into Science and Technology'), ('Harm Reduction', 'Harm Reduction'), ('Harry Potter', 'Harry Potter'), ('History', 'History'), ('Japan', 'Japan'), ('Jewish', 'Jewish'), ('Juggling at GU', 'Juggling at GU'), ('Students of a Jane Austen Persuasion', 'Students of a Jane Austen Persuasion'), ('K-Pop', 'K-Pop'), ('Korean', 'Korean'), ('GULGBTQ+', 'GULGBTQ+'), ('Manga and Anime', 'Manga and Anime'), ('Marxists', 'Marxists'), ('Mature Students Association', 'Mature Students Association'), ('GU Rock and Metal', 'GU Rock and Metal'), ('Music Club', 'Music Club'), ('Muslim Student Association', 'Muslim Student Association'), ('Opera', 'Opera'), ('Onekind', 'Onekind'), ('Philosophy', 'Philosophy'), ('Physics', 'Physics'), ('Plastic Surgery', 'Plastic Surgery'), ('Politics', 'Politics'), ('Quiz', 'Quiz'), ('Real Ale', 'Real Ale'), ('Robotics', 'Robotics'), ('Screenwriting', 'Screenwriting'), ('Sewing', 'Sewing'), ('Sexpression', 'Sexpression'), ('Shakespeare', 'Shakespeare'), ('Shrek', 'Shrek'), ('Sign Language', 'Sign Language'), ('Socialist', 'Socialist'), ('Society for Women in Tech', 'Society for Women in Tech'), ('Student Theatre at Glasgow', 'Student Theatre at Glasgow'), ('Successful Women at Glasgow', 'Successful Women at Glasgow'), ('Surgical', 'Surgical'), ('Sustainable Technologies', 'Sustainable Technologies'), ('Improv Teatime', 'Improv Teatime'), ('Tea', 'Tea'), ('Tech', 'Tech'), ('Tedx', 'Tedx'), ('Tennents Lager Appreciation', 'Tennents Lager Appreciation'), ('UGRacing', 'UGRacing'), ('Vegan', 'Vegan'), ('Walking', 'Walking'), ('Wine', 'Wine'), ('Women in Science, Tech, Engineering and Maths', 'Women in Science, Tech, Engineering and Maths'), ('Createive Writing', 'Createive Writing'), ('Hares and Hounds Running Club', 'Hares and Hounds Running Club'), ('Karate', 'Karate'), ('Hockey', 'Hockey'), ('Rugby Football', 'Rugby Football'), ('Sailing Club', 'Sailing Club'), ('Ski & Snowboard Club', 'Ski & Snowboard Club'), ('Aikido', 'Aikido'), ('American Football', 'American Football'), ('Athletics', 'Athletics'), ('Badminton', 'Badminton'), ('Basketball', 'Basketball'), ('Boat/Rowing', 'Boat/Rowing'), ('Boxing', 'Boxing'), ('Canoe', 'Canoe'), ('Cheerleading', 'Cheerleading'), ('Cricket', 'Cricket'), ('Curling', 'Curling'), ('Cycling', 'Cycling'), ('Fencing', 'Fencing'), ('Football', 'Football'), ('Gaelic Football', 'Gaelic Football'), ('Golf', 'Golf'), ('Gymnastics', 'Gymnastics'), ('Judo', 'Judo'), ('Kendo', 'Kendo'), ('Lacrosse', 'Lacrosse'), ('Mounteneering', 'Mounteneering'), ('Muay Thai Boxing', 'Muay Thai Boxing'), ('Netball', 'Netball'), ('Potholing (Caving)', 'Potholing (Caving)'), ('Riding/Equestrian', 'Riding/Equestrian'), ('Shinty', 'Shinty'), ('Shorinji Kempo', 'Shorinji Kempo'), ('Skydive', 'Skydive'), ('Squash', 'Squash'), ('Surf', 'Surf'), ('Swimming and Waterpolo', 'Swimming and Waterpolo'), ('Taekwondo', 'Taekwondo'), ('Trampoline', 'Trampoline'), ('Triathlon', 'Triathlon'), ('Ultimate Frisbee', 'Ultimate Frisbee'), ('Volleyball', 'Volleyball'), ('Wakeboarding', 'Wakeboarding'), ('Weightlifting', 'Weightlifting'), ('Yoga', 'Yoga'), ('Table Tennis', 'Table Tennis'), ('Tennis', 'Tennis')], max_length=50)),
            ],
            options={
                'verbose_name_plural': 'Societies',
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dob', models.DateField()),
                ('gender', models.CharField(choices=[('F', 'Female'), ('M', 'Male'), ('N', 'Non-Binary')], max_length=1)),
                ('bio', models.TextField(max_length=300)),
                ('year_in', models.IntegerField()),
                ('location', models.CharField(max_length=30)),
                ('library_floor', models.CharField(choices=[('Level 1', 'Level 1'), ('Level 2', 'Level 2'), ('Level 3', 'Level 3'), ('Level 4', 'Level 4'), ('Level 5', 'Level 5'), ('Level 6', 'Level 6'), ('Level 7', 'Level 7'), ('Level 8', 'Level 8'), ('Level 9', 'Level 9'), ('Level 10', 'Level 10'), ('Level 11', 'Level 11'), ('Level 12', 'Level 12'), ('Round Reading Room', 'Round Reading Room'), ('Other', 'Other')], max_length=20)),
                ('looking_for', models.CharField(choices=[('F', 'Female'), ('M', 'Male'), ('N', 'Non-Binary')], max_length=1)),
                ('image1', models.ImageField(blank=True, null=True, upload_to='profile_pics')),
                ('image2', models.ImageField(blank=True, null=True, upload_to='profile_pics')),
                ('image3', models.ImageField(blank=True, null=True, upload_to='profile_pics')),
                ('image4', models.ImageField(blank=True, null=True, upload_to='profile_pics')),
                ('image5', models.ImageField(blank=True, null=True, upload_to='profile_pics')),
                ('course', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='glover.Course')),
                ('interests', models.ManyToManyField(to='glover.Interest')),
                ('societies', models.ManyToManyField(to='glover.Society')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('msg_content', models.TextField(max_length=500)),
                ('time_sent', models.DateTimeField(auto_now_add=True)),
                ('receiver', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='receiver', to='glover.Profile')),
                ('sender', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sender', to='glover.Profile')),
            ],
        ),
        migrations.CreateModel(
            name='Match',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time_matched', models.DateTimeField(auto_now_add=True)),
                ('profile1', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='matches', to='glover.Profile')),
                ('profile2', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='matched', to='glover.Profile')),
            ],
            options={
                'verbose_name_plural': 'Matches',
            },
        ),
        migrations.CreateModel(
            name='Like',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_liked', models.BooleanField()),
                ('profile', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='likes', to='glover.Profile')),
                ('profile_liked', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='liked', to='glover.Profile')),
            ],
        ),
    ]
